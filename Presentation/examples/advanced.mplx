fn factorial(n: i32) -> i32 {
    if (n <= 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

fn power(base: i32, exp: i32) -> i32 {
    if (exp == 0) {
        return 1;
    } else {
        if (exp == 1) {
            return base;
        } else {
            return base * power(base, exp - 1);
        }
    }
}

fn complex_calc(a: i32, b: i32, c: i32) -> i32 {
    let temp1 = a + b;
    let temp2 = temp1 * c;
    
    if (temp2 > 100) {
        let result = temp2 / 2;
        return result;
    } else {
        if (temp2 < 50) {
            let result = temp2 * 2;
            return result;
        } else {
            return temp2;
        }
    }
}

fn main() -> i32 {
    let fact_result = factorial(5);
    let pow_result = power(2, 8);
    let calc_result = complex_calc(10, 5, 3);
    
    let final_result = fact_result + pow_result + calc_result;
    return final_result;
}
